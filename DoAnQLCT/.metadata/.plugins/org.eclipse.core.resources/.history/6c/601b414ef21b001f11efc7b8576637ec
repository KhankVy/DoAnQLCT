package GUI;

import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

import BUS.GetThuChiBUS;
import MODEL.Categories;
import MODEL.Transactions;

import javax.swing.JMenuBar;
import javax.swing.JMenu;
import java.awt.Font;

import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.awt.event.ActionEvent;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JButton;
import javax.swing.SpringLayout;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;

public class Main extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	/////////////////////

	private static int currentUserID;
	private static int currentCargories;
	private JTextField txtSoDu;
	private JTextField txtTChi;
	private JTextField txtTThu;
	private static ArrayList<Transactions> transactions = new ArrayList<>();
	private static ArrayList<Categories>dsCategory=new ArrayList<>();
	private GetThuChiBUS thuchi = new GetThuChiBUS();
	private ChartPanel chartPanel;
	private JComboBox cbThang;
	private JComboBox cbNam;

	public static int getCurrentCargories() {
		return currentCargories;
	}

	public static void setCurrentCargories(int currentCargories) {
		Main.currentCargories = currentCargories;
	}

	public static int getCurrentUserID() {
		return currentUserID;
	}

	public static void setCurrentUserID(int userId) {
		// TODO Auto-generated method stub
		currentUserID = userId;

	}

	public void loginUser(int userID) {
		setCurrentUserID(userID);
		// Proceed with other login operations
	}

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main frame = new Main();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public Main() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 746, 562);

		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		JMenu mnNewMenu = new JMenu("File");
		mnNewMenu.setFont(new Font("Segoe UI", Font.PLAIN, 18));
		menuBar.add(mnNewMenu);

		JMenuItem mntmNewMenuItem = new JMenuItem("Login");
		mntmNewMenuItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				DangNhap dn = new DangNhap();
				dn.setVisible(true);
				dispose();
			}
		});
		mntmNewMenuItem.setFont(new Font("Segoe UI", Font.PLAIN, 16));
		mnNewMenu.add(mntmNewMenuItem);

		JMenuItem mntmNewMenuItem_2 = new JMenuItem("Exit");
		mntmNewMenuItem_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(EXIT_ON_CLOSE);
			}
		});
		mntmNewMenuItem_2.setFont(new Font("Segoe UI", Font.PLAIN, 16));
		mnNewMenu.add(mntmNewMenuItem_2);

		JMenuItem mntmNewMenuItem_1_1 = new JMenuItem("Categories");
		mntmNewMenuItem_1_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				FmCategories fm = new FmCategories();
				FmCategories.setCurrentUserID(getCurrentUserID());
				fm.setVisible(true);
				dispose();
			}
		});
		mntmNewMenuItem_1_1.setFont(new Font("Segoe UI", Font.PLAIN, 18));
		menuBar.add(mntmNewMenuItem_1_1);

		JMenuItem mntmNewMenuItem_1 = new JMenuItem("Transactions");
		mntmNewMenuItem_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				FmTransactions fm = new FmTransactions();
				FmTransactions.setCurrentUserID(currentUserID);
				fm.setVisible(true);
				dispose();
			}
		});
		mntmNewMenuItem_1.setFont(new Font("Segoe UI", Font.PLAIN, 18));
		menuBar.add(mntmNewMenuItem_1);

		JMenuItem mntmNewMenuItem_1_2 = new JMenuItem("Budgets");
		mntmNewMenuItem_1_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				FmBudgets fm = new FmBudgets();
				FmBudgets.setCurrentUserID(currentUserID);
				fm.setVisible(true);
				dispose();
			}
		});
		mntmNewMenuItem_1_2.setFont(new Font("Segoe UI", Font.PLAIN, 18));
		menuBar.add(mntmNewMenuItem_1_2);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);

		JLabel lblNewLabel = new JLabel("Số Dư");
		lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 20));

		txtSoDu = new JTextField();
		txtSoDu.setEditable(false);
		txtSoDu.setColumns(10);

		JLabel lblTngThu = new JLabel("Tổng Thu");
		lblTngThu.setFont(new Font("Tahoma", Font.PLAIN, 20));

		JLabel lblTngChi = new JLabel("Tổng Chi");
		lblTngChi.setFont(new Font("Tahoma", Font.PLAIN, 20));

		txtTChi = new JTextField();
		txtTChi.setEditable(false);
		txtTChi.setColumns(10);

		txtTThu = new JTextField();
		txtTThu.setEditable(false);
		txtTThu.setColumns(10);

		JButton btnLoc = new JButton("Lọc");
		btnLoc.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//showPieChart();
				int selectedMonth = Integer.parseInt((String) cbThang.getSelectedItem());
		        int selectedYear = Integer.parseInt((String) cbNam.getSelectedItem());
		        loadDataTable(selectedMonth, selectedYear);
			}
		});
		btnLoc.setFont(new Font("Tahoma", Font.PLAIN, 20));
		
		cbThang = new JComboBox();
		cbThang.setFont(new Font("Tahoma", Font.PLAIN, 16));
		cbThang.setModel(new DefaultComboBoxModel(new String[] {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"}));
		
		JLabel lblChnThng = new JLabel("Chọn tháng và năm");
		lblChnThng.setFont(new Font("Tahoma", Font.PLAIN, 20));
		
		int currentYear = Calendar.getInstance().get(Calendar.YEAR);
		cbNam = new JComboBox();
		cbNam.setFont(new Font("Tahoma", Font.PLAIN, 16));
		cbNam.setModel(new DefaultComboBoxModel(new String[] {Integer.toString(currentYear), Integer.toString(currentYear - 1), Integer.toString(currentYear - 2)}));
		
		GroupLayout gl_contentPane = new GroupLayout(contentPane);
		gl_contentPane.setHorizontalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addGap(29)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(lblChnThng, GroupLayout.PREFERRED_SIZE, 188, GroupLayout.PREFERRED_SIZE)
							.addGap(35)
							.addComponent(cbThang, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_contentPane.createSequentialGroup()
							.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
								.addComponent(lblTngThu, GroupLayout.PREFERRED_SIZE, 95, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblNewLabel, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
								.addComponent(txtTThu, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
								.addComponent(txtSoDu, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE))))
					.addGap(31)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(cbNam, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
							.addGap(87)
							.addComponent(btnLoc))
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(lblTngChi)
							.addGap(18)
							.addComponent(txtTChi, GroupLayout.PREFERRED_SIZE, 173, GroupLayout.PREFERRED_SIZE)))
					.addGap(48))
		);
		gl_contentPane.setVerticalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addGap(11)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING)
						.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
							.addComponent(cbThang, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addComponent(cbNam, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
						.addComponent(lblChnThng, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnLoc))
					.addGap(18)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING)
						.addComponent(lblTngThu, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
						.addComponent(txtTThu, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
						.addComponent(txtTChi, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
						.addComponent(lblTngChi, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE))
					.addGap(19)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblNewLabel)
						.addComponent(txtSoDu, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
					.addContainerGap(447, Short.MAX_VALUE))
		);
		contentPane.setLayout(gl_contentPane);
		initData();
	}
	@SuppressWarnings("removal")
//	private void showPieChart() {
//		// TODO Auto-generated method stub
//		int totalIncome = thuchi.calculateMonthlyIncome(getCurrentUserID(), getCurrentCargories());
//		int totalExpense = thuchi.calculateMonthlyExpense(getCurrentUserID(), getCurrentCargories());
//		DefaultPieDataset pie = new DefaultPieDataset();
//		pie.setValue("Tổng Thu", totalIncome);
//		pie.setValue("Tổng Chi", totalExpense);
//		JFreeChart chart = ChartFactory.createPieChart("Biểu đồ thu chi theo tháng", pie, true, true, true);
//		PiePlot p = (PiePlot) chart.getPlot();
//		chartPanel = new ChartPanel(chart);
//		chartPanel.setMouseWheelEnabled(true);
//		chartPanel.setMouseZoomable(true);
//		chartPanel.setDomainZoomable(true);
//		chartPanel.setDisplayToolTips(true);
//		chartPanel.setBounds(70, 150, 600, 300);// setBounds(độ rộng trái, phải, độ rộng trung tâm, chiều cao)
//		contentPane.add(chartPanel);
//		chartPanel.setLayout(null);
//		contentPane.revalidate();
//        contentPane.repaint();
//	}
	private void showPieChart(double totalIncome, double totalExpense) {
	    DefaultPieDataset pieDataset = new DefaultPieDataset();
	    pieDataset.setValue("Tổng Thu", totalIncome);
	    pieDataset.setValue("Tổng Chi", totalExpense);

	    JFreeChart pieChart = ChartFactory.createPieChart("Biểu đồ thu chi theo tháng", pieDataset, true, true, false);
	    PiePlot plot = (PiePlot) pieChart.getPlot();
	   // plot.setSectionPaint("Tổng Thu", new Color(0, 204, 0));
	    //plot.setSectionPaint("Tổng Chi", new Color(204, 0, 0));

	    if (chartPanel != null) {
	        contentPane.remove(chartPanel);
	    }

	    chartPanel = new ChartPanel(pieChart);
	    chartPanel.setBounds(70, 150, 600, 300);
	    contentPane.add(chartPanel);
	    chartPanel.setLayout(null);

	    contentPane.revalidate();
	    contentPane.repaint();
	}


	// Hàm tính số dư
	private void initData() {
		int TongTienThu = thuchi.calculateMonthlyIncome(getCurrentUserID(), getCurrentCargories()); 
		txtTThu.setText(Integer.toString(TongTienThu)); // Hiển thị số dư lên giao diện
		int TongTienChi = thuchi.calculateMonthlyExpense(getCurrentUserID(), getCurrentCargories());
		txtTChi.setText(Integer.toString(TongTienChi)); // Hiển thị số dư lên giao diện

		if (TongTienThu < TongTienChi)
			JOptionPane.showMessageDialog(txtSoDu, "số tiền chi đã vượt quá số tiền thu vào!!!");
		else {
			int sodu = TongTienThu - TongTienChi;
			txtSoDu.setText(Integer.toString(sodu));
		}
	}
	private void loadDataTable(int selectedMonth, int selectedYear) {
	    // Khởi tạo các giá trị tổng thu, tổng chi
	    double totalIncome = 0;
	    double totalExpense = 0;

	    // Tính toán ngày bắt đầu và ngày kết thúc của tháng và năm được chọn
	    Calendar startCal = Calendar.getInstance();
	    startCal.set(selectedYear, selectedMonth - 1, 1, 0, 0, 0);
	    java.util.Date startDate = startCal.getTime();

	    Calendar endCal = Calendar.getInstance();
	    endCal.set(selectedYear, selectedMonth - 1, startCal.getActualMaximum(Calendar.DAY_OF_MONTH), 23, 59, 59);
	    java.util.Date endDate = endCal.getTime();

	    // Tính tổng thu và tổng chi
	    for (Transactions trans : transactions) {
	        if (trans.getCreatedDate().after(startDate) && trans.getCreatedDate().before(endDate)) {
	            if (trans.isType()) {
	                totalExpense += trans.getAmount();
	            } else {
	                totalIncome += trans.getAmount();
	            }
	        }
	    }

	    // Hiển thị tổng thu, tổng chi và số dư lên giao diện
	    txtTThu.setText(Double.toString(totalIncome));
	    txtTChi.setText(Double.toString(totalExpense));
	    double sodu = totalIncome - totalExpense;
	    txtSoDu.setText(Double.toString(sodu));

	    // Hiển thị biểu đồ
	    showPieChart(totalIncome, totalExpense);
	}

}
